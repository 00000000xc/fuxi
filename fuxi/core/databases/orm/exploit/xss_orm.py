#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Author  : jeffzhang
# @Time    : 2019/9/6
# @File    : xss_orm.py
# @Desc    : ""

import time
from bson import ObjectId
from fuxi.common.utils.random_str import random_str
from fuxi.core.databases.db_error import DatabaseError
from fuxi.core.databases.orm.database_base import DatabaseBase
from fuxi.core.databases.db_mongo import mongo, T_XSS_TASKS, T_XSS_PAYLOADS, T_XSS_RES
from fuxi.common.utils.logger import logger


class _DBXssTasks(DatabaseBase):
    def __init__(self):
        DatabaseBase.__init__(self)
        self.table = T_XSS_TASKS

    def get_detail_by_salt(self, salt):
        return mongo[self.table].find_one({"salt": salt})

    def add(self, name, payload_name, payload, op):
        if name and payload_name and payload:
            salt = random_str(5)
            payload = payload.replace("var salt =", "var salt_tmp =")
            payload = payload.replace("var salt=", "var salt_tmp =")
            payload_str = "var salt = '{}';\n".format(salt) + payload
            inserted_id = mongo[self.table].insert_one({
                "name": name.strip(), "payload_name": payload_name.strip(),
                "payload": payload_str, "salt": salt, "date": int(time.time()),
                "op": op if op else "-"
            }).inserted_id
            return str(inserted_id)
        else:
            logger.warning("xss task data insert failed: invalid data")
            raise DatabaseError("invalid data")


class _DBXssPayloads(DatabaseBase):
    def __init__(self):
        DatabaseBase.__init__(self)
        self.table = T_XSS_PAYLOADS

    def add(self, name, value):
        if name and value:
            inserted_id = mongo[self.table].insert_one({
                "name": name.strip(), "value": value, "date": int(time.time())
            }).inserted_id
            return str(inserted_id)
        else:
            logger.warning("xss payload data insert failed: invalid data")
            raise DatabaseError("invalid data")

    def update_value_by_id(self, _id, value):
        return mongo[self.table].update_one({"_id": ObjectId(str(_id))}, {
                "$set": {"value": value, "date": int(time.time())},
            })


class _DBXssResult(DatabaseBase):
    def __init__(self):
        DatabaseBase.__init__(self)
        self.table = T_XSS_RES

    def get_list_by_tid(self, tid):
        return mongo[self.table].find({"tid": str(tid)}).sort("date", -1).limit(1000)

    def add(self, tid, salt, client='0.0.0.0', referrer='-', url=None, data=None, extend=None):
        if salt and tid:
            url = url if url else "-"
            data = data if data else "-"
            extend = extend if extend else "-"
            inserted_id = mongo[self.table].insert_one({
                "tid": str(tid), "salt": salt, "url": url, "data": data,
                "client": client, "referrer": referrer, "extend": extend, "date": int(time.time())
            }).inserted_id
            return str(inserted_id)
        else:
            logger.warning("xss payload data insert failed: invalid data")
            raise DatabaseError("invalid data")


DBXssTasks = _DBXssTasks()
DBXssPayloads = _DBXssPayloads()
DBXssResult = _DBXssResult()


